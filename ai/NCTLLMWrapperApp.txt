NCT LLM Wrapper App


This future application is intended to provide a user-friendly and flexible environment for users to interact with LLMs by building out a more complete app experience, expanding the number of available controls and conventions for interacting with chat responses.  Chat responses are not just static text for Control+C but instead 
1. Are editable by the user.
2. Can be transformed (replaced where they sit) with additional prompts.
3. Can be deleted from the chat sequence.
4. Can be moved out of the chat sequence into a different one or a project bin/folder.


That is, instead of generating a new response that adds to a long scrolling list chat responses, the user also has the option to stay with one response, edit it, and then change it with AI. This means there will be an undo manager attached to each chat response.


At the tail of each chat response is a set of controls for making follow-up responses, such as “Revise to Include [], Exclude []”.  Settings include removing any introductions and conclusions.  Modes include generating output that does not contain any lists and is only prose.  By controlling the output of an LLM and using tools that can make use of it, this very broad technology can be experienced more powerfully than the current, plain interactive chatbot format.




OUTPUT LAYOUT AND CONTROLS


1. By default, so that all text can be evaluated by the user as it arrives, text received by the LLM is fed into multiple text container columns, magazine/newspaper style, with 3 columns set by default.
2. An option is provided to feed generated text into a clipped, portrait (8.5” x 11” or 1:1.294) text area that has been scaled down to 70%.  The text area will have scrollbars appear on overflow.
3. Chat responses can be viewed as a set if grid items, each at 50% scale.
4. A slider is made prominent for the chat output length, above or to the side of the chat input box, with markings going from “paragraph” to “several pages”.
5. Chat responses can be collapsed accordion-style inside the chat sequence. They can also be deleted from a chat sequence, to allow clearing out irrelevant chat responses.  All chat responses can be edited and reordered.


The chat input box is placed at the top of the window instead of the bottom.  It allows insertion of rich text, including tables and coloring of computer code. It can expand to the height of the viewport (the browser/window height).




CHAT RESPONSES ARE TREATED AS DYNAMIC UI OBJECTS, EXIST AS NOTEBOOK CLIPPINGS


6. Chat responses will not be fixed and immutable like they are today, requiring copy and paste to change or make use of them.  Their essential state at the code level is a notebook clipping that can be moved around and edited by the user in the chat window.  
. 
   1. Chat responses can be transformed by the user in-line in multiple ways. First,hey can be modified by applying another chat operation to them, with the operations accessed by a menu at the bottom of the chat response.  In other words, the LLM’s API will operate on the chat response itself it just gave inside its container according to what the user has requested, whether it is a transformation of data state or copy revision. That is, it will transform the data inside the response text control and replace the previous text.  
      1. In terms of content, the user can instruct any number of changes to be applied by the AI. 
      2. In terms of data format it might be transformed into or from a table, a list, paragraph form.
The text area that contains a chat response can be changed back and forth from static text (as it is everywhere today) into a text editing control so that the user can make successive transformations inside the chat response and get the outcome he or she wants.  The person may edit the response then apply another AI operation to the text and so on.  Accordingly, there is an undo manager attached to each chat response box, a history of changes, so that the user can go back.   When the user is finished, the chat response, existing fundamentally as a notebook clipping at all times, can be moved to a bin inside the app, it can be e-mailed, etc. or downloaded in any format for permanent storage.  Each chat response notebook clipping has a download control with options for download format so that this does not have to be the same as the contents of the chat clipping itself.
   2. Notebook clippings are not tied to a single chat window but can be moved into bins.  A chat session is a list of editable text controls that can be reordered, revised, and copy-edited so that it is exportable to file to serve as the basis of an eventual document for the user.










CHAT OUTPUT TAIL MENU: FOLLOW UP COMMANDS
For each response, the AI is asked to make a list (which is placed inside a dropdown menu) at the end of each chat response with five possible follow-up requests, and this allows context-specific operations to occur by the user.  In the UI beneath each chat response is a standard set of operations for follow-up requests as well.
- A menu appears at the bottom of every chat response
allowing the user to modify the original prompt 
or respond to the chat.  This includes the AI-generated modification prompts provided inside the response that are specific to it as well as the standard ones.




BUILDING LLM PROMPTS


-- Rectangular building blocks components replace typewritten
prompts.  Each component contains GUI controls for its parameters
and is around 200 pt x 200 pt.  When there is more than one they 
flow like text.  A prompt is made out
of one or more of these building blocks.
Each building block makes up the prompt, allowing rapid
construction of parametric prompts rather than just verbal ones.
The container for making a prompt out of these components 
can be made as large as a page.
-- The AI itself can be requested to make relevant prompts
and this will be incorporated into the app.


STANDARD APP SOFTWARE FUNCTIONALITY


- Export contents of selected output control
to document, .RTF, .PDF, .TXT, .CSV, .XLSX.
- AI-generated tabular data appears as interactive table
in the app.
- AI-generated map data appears on an interactive map.
- Print selected output control.
- Functions for reformatting data output are provided.










PROMPT KEYWORDS COMBINED WITH PASTE AREAS AND DROPDOWN MENUS


CONTINUE: [PASTE AREA]
EXPLAIN: [PASTE AREA]
REACT TO: [PASTE AREA]
COMPARE: [PASTE AREA 1]  TO [PASTE AREA2]
COMPARE: [TABLE CONTROL WITH PASTE CAPABILITIES]
EXPAND ON CONTENTS OF TEXT:
SUMMARIZE:
SUGGEST MODIFICATIONS:
SUGGEST ADDITIONS:
VERIFY FACTUALITY:
CHANGE [TONE/VOICE/PERSPECTIVE]:
LIST INSTANCES OF [PASTE AREA] FROM:
MAKE OUTLINE OF:


MAKE SUGGESTIONS FOR HOW TO CARRY OUT:
suggest the beginning steps of the first part to carry this out
Make up specifics
OUTLINE THE STEPS [TO CARRY OUT]...
PROVIDE PLANNING [HOW TO CARRY OUT A CHORE OR TASK]:
DIAGNOSE PROBLEM:
SUGGEST SOLUTIONS FOR PROBLEM:


PROMPT REVISION        FUNCTIONALITY
- Qualities: add [more or less] of [quality].


MAKE ANALOGY FOR: [PASTE AREA]
RELATE [PASTE AREA] TO [PASTE AREA]
CONTRAST [PASTE AREA] WITH [PAST AREA]


Generation
Make a template for
FILL IN THE FOLLOWING TEMPLATE [PASTE AREA] WITH THIS DATA [PASTE AREA 2]
ANALYZE AND APPLY HEADING STYLES TO THE FOLLOWING TEXT [PASTE AREA]   [ [X] WITH FONT: [Arial] ]


PROMPT KEYWORD COMMANDS + CONTROLS IN JSON


// Order of array contents matters for each prompt command because
Compare PasteArea1 With PasteArea2  is four separate objects in sequence.
        
promptKeywordCommands = [{


        Compare = {[ {CommandText = “COMPARE”}, {UIControl = “TextAreaRichText”},  {CommandText = “WITH”} {UIcontrol = “TextAreaRichText” }]},


]




CONTROLS USED IN THE APP:


RICH TEXT CONTROL
TABLE CONTROL
PLAIN TEXT CONTROL
CODE EDITOR CONTROL WITH HIGHLIGHTING






FIRST VERSION


1. TEXT BOX AT TOP
2. FEED GENERATED AI TEXT INTO THREE COLUMNS.




BOOLEAN OPTIONS


[  ] RESPONSE IS HTML WITH RELEVANT HYPERLINKS EMBEDDED THROUGHOUT
[  ] MAKE LIST OF REFERENCES WITH HYPERLINKS AT BOTTOM




AICHATPROMPT:// URL HYPERLINKS IN CHAT RESPONSES


EMBEDS OF AICHATPROMPT:// HYPERLINKS THROUGHOUT TEXT ALLOW THE USER TO CLICK ON WORDS, PHRASES, AND PARAGRAPHS CHOSEN BY THE AI THAT WILL EXPAND ON THOSE TOPICS IN A SEPARATE RESPONSE.