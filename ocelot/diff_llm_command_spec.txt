LLM Diff Command Specifications And Prompt

Instead of regenerating an entire document to include changes, as AI
chatbots currently do by default, a language model can be told to generate
modification commands that the receiving program follows. 

Importantly, for an LLM the document fed to the LLM will be given 
a line ID for each line number so that the LLM is working with
line IDs instead of line numbers that change after each diff operation.

A diff-based approach for document modifications can be much more
efficient than regenerating the entire document every time a few changes are
made. By using targeted commands (such as inline text replacement or
inserting text at specific line numbers), the system can apply only the
necessary modifications, reducing both processing time and the chance
for introducing new errors.

These commands allow for targeted updates at the character or line
level.  For instance, if it is just a set of dividers that should be
inserted into the document, the LLM can provide the commands for the
specific locations and the program updates it. If the LLM was instructed
to reorganize the document with existing text, it can do that with the
move_text commands. An LLM can assist the program in quickly
reorganizing a document, eliminating redundancies, and fixing
typographic errors.  If placed in a more complex programmatic
arrangement, the LLM can repeatedly review and modify the document to
achieve goals, doing researches, testing code, etc.

(This also points to broader such situations such as personal computers
assistants that could, if given commands to make directories and move
files around on the filesystem, organize the contents of the filesystem 
and tag files, often inspecting the contents.  The emphasis is 
providing a set of commands that enable re-organization and editing.  
This could include a situation where the AI delves into the contents of 
a directory of files and organizes its contents without generating new text.)

The language model can play the role of a change suggester that outputs
granular edit operations. These operations fall into categories such as
inline text replacement, line insertion, text deletion, block movement,
and full line replacement.

All of this will minimize unnecessary computation, reduce output noise,
and streamline document updates while maintaining full control and
traceability over each modification.

In the case it is a tree structure that is being edited (e.g. XML), 
the LLM can be given a list of tree operations to use
instead and the program will use those to modify the files.
(If given a web page, the host program would receive commands for
adding and removing tree elements from the DOM).

----------------------

LLM Prompt:


You are given a document and a set of modifications to be applied using
diff commands. Your task is not to regenerate the whole document, but to
output a list of specific diff commands that represent the required
changes.


The available commands are:

1. Inline Text Replacement Command: inline_replace Parameters: -
line_number: The line where the change occurs - start_index: The
starting character index for the replacement - end_index: The ending
character index for the replacement - new_text: The text to replace the
original segment

2. Insertion Command: insert_text Parameters: - line_number: The line
where the insertion occurs - position: The character index at which to
insert the new text - new_text: The text to be inserted

3. Deletion Commands: - delete_text: For deleting a portion of a line
Parameters: line_number, start_index, end_index - delete_line: For
deleting an entire line Parameters: line_number

4. Movement Command: move_text Parameters: - start_line: The first line
of the block to be moved - end_line: The last line of the block to be
moved - destination_line: The line after which the block should be
inserted

5. Replace Line Commands: - replace_line: For replacing the content of a
single line Parameters: line_number, new_text - replace_lines: For
replacing a range of lines Parameters: start_line, end_line, new_text

When given an instruction, respond only with the corresponding diff
commands using the formats above. For example, if asked to replace
characters 10 to 20 on line 5 with "updated text", you should respond
with:

    inline_replace(line_number=5, start_index=10, end_index=20,
    new_text="updated text")

Keep your responses succinct and only output the diff commands without
additional commentary or full document regeneration.


-----------------

PYTHON CODE STUBS

# 1) Inline Text Replacement: Replace a segment within a specific line.
def inline_replace(line_number, start_index, end_index, new_text):
    # Replace text between start_index and end_index on the given line
    # with new_text
    pass

# Example: Replace characters 10-20 on line 5 with "updated text".
inline_replace(line_number=5, start_index=10, end_index=20,
new_text="updated text")

# 2) Insertion: Add new text at a particular line and position.
def insert_text(line_number, position, new_text):
    # Insert new_text into the specified line at the given character
    # position.
    pass

# Example: Insert "Inserted content" at position 0 (beginning) of line
# 3.
insert_text(line_number=3, position=0, new_text="Inserted content")

# 3) Deletion: Remove specific portions of text or entire lines.
def delete_text(line_number, start_index, end_index):
    # Delete text from start_index to end_index on the given line.
    pass

def delete_line(line_number):
    # Delete the entire line.
    pass

# Example: Delete characters 5-15 on line 8.
delete_text(line_number=8, start_index=5, end_index=15)
# Example: Delete the entire line 10.
delete_line(line_number=10)

# 4) Movement: Rearrange sections of text by moving a block of lines.
def move_text(start_line, end_line, destination_line):
    # Remove text from start_line to end_line and insert it at
    # destination_line.
    pass

# Example: Move lines 12 through 14 to after line 20.
move_text(start_line=12, end_line=14, destination_line=20)

# 5) Replace Line: Replace one or more entire lines with new text.
def replace_line(line_number, new_text):
    # Replace the content of a specific line with new_text.
    pass

def replace_lines(start_line, end_line, new_text):
    # Replace the content from start_line to end_line with new_text.
    pass

# Example: Replace line 20 with new text.
replace_line(line_number=20, new_text="This line has been replaced.")
# Example: Replace lines 25 to 27 with a block of new text.
replace_lines(start_line=25, end_line=27, new_text="Block of text
replacing multiple lines.")


----------


