NCT DESKTOP OS:


EMBEDDED WINDOWS (OR WINDOW-IN-WINDOW FUNCTIONALITY)
Reducing Application Switching for Coupled Software Application Tasks


Using two software applications at the same time is a foundational activity of using an operating system, but the window management situation can be a problem because the user has to juggle application and window focus.  The activity of using two applications together or at the same time can be improved by embedding one application’s window inside the other. This embedded window then moves with and minimizes along with its parent window and is (by default) bound to the interior of its frame.


SCENARIO: A set of installation instructions are being followed on a web page that involve lots CLI (terminal) commands.  To carry out the steps, the user, instead of switching to the Terminal app and arranging the window side by side with the browser window, right-clicks inside the web browser window and inserts (embeds) a terminal window inside the web page viewport.  By default this affixes the embedded window to the left edge of the web page (the window’s viewport frame) so that as the page scrolls it remains fixed. This allows for each step of the instructions to be executed without changing and alternating window focus.  The embedded window, since it sits inside the browser window, will minimize along with its parent window and move with it.  It can be resized inside the window’s viewport frame, and it can also be collapsed into its title bar, horizontally or vertically, to be minimized inside the window.


        OTHER, RELATED SCENARIOS:


* The user inserts a File Navigator window into the web browser page for the task of dragging images from the web page into various folders on the filesystem.
* The user inserts a text editor or word processing window into the web page for copying and pasting (or dragging) text and/or images into the word processing document.  (Also applicable for copying data to and from spreadsheets).
* In a word processing application document, the user inserts a web browser window into the document viewport and navigates to a certain URL in order to drag text and images from the page to the document.
* The user wants to drag files from the File Manager to a web page to upload them to the web server. He right clicks and inserts a File Manager window into the web browser page for this task.
* The user opens up a PDF manual for a video editor and makes it fullscreen.  He then embeds windows from the open video editor application in order to follow the manual.




        GLOBALLY AVAILABLE WINDOW APPS FOR INSERTION


* This means that the system provides an “Insert Window…” function universally into the right-click context menu with various app window types available.
* Some tasks are so common that the window type might be made a common shortcut, like (“Slide In Embedded File Navigator”) so that the user can quickly slide in the File Navigator, drag a file from it to the upload area of a web page, and then slide it back with the same toggle function.
   * This means that this convention could be something utilized rapidly instead of just in longer duration scenarios such as using the embedded Terminal app inside a page of web page instructions.


EMBED WINDOW VS. (MULTI-APP COMPOSITE WINDOWS) INSERT WINDOW INTO FRAME
* Currently in a window manager you can manually arrange two windows side by side and there are sometimes convenience functions provided that assist you in setting up this workspace layout.  In practice, though, it may not always work for all users.  As an alternative, if the window manager provided it, you could construct an empty window and then place the two windows inside it as subwindows, sitting next to each other.  The same effect is achieved but the difference is that they can be moved together. Since they sit inside the same parent window and its frame they will move and minimize together, being part of the same parent window.  We can call this a composite window, one that the user opted to make for working with two applications.
* A composite, multi-app window is one that was put together by the user where, for example, it has been divided horizontally in equal proportion (1:1), with the Terminal on the left and the web browser on the right.  This is an alternative scenario to what we just discussed, which is the Terminal window being embedded inside the web browser window.  
* The titlebar of the composite window contains the titles of both windows and when the window minimizes, they minimize together, having been made components of the new window container.  A major advantage of this is layout stability. When just manually setting up two windows side by side, their arrangement can disrupted too easily.
   * In short, embedding a window places it on top of and inside the parent window’s viewport frame which allows tight utilization of it next to the parent window’s contents.  By contrast, making an empty, composite window and placing separate application windows next to each other inside it is more about utilizing them side by side. 
      * However, in a composite window, if there are say four nested windows, one or more of the windows can be collapsed so that the user can focus on the remaining visible ones.
      * The layout of the subwindows inside the composite window can be horizontal, vertical, or grid.






BACKGROUND INFORMATION: A common activity for the desktop computer user is moving back and forth between two applications to use one with the other, such as switching to the File Manager to drop a file onto an upload area of a web page in the web browser.  The inverse is, for example, setting up the File Manager so that individual images from a web page can be dropped onto file directories.  There is much room for improvement because using two software applications at the same time involves the uncomfortable task of resolving window occlusion; the application that needs to be utilized has to either be arranged side by side with the current one sitting or placed on top of it.  The third scenario is that the user switches to the other application and then switches back.  In the desktop environment, only one window and application can accept focus at a time, which means that usually the user interface situation for using two applications together is unpleasant.  By taking a different approach and embedding a window from one software application into the other, the issue of application and window focus is resolved because activity stays inside one application and one window of that application.  Then another approach is to allow a user to make a composite, custom window that doesn’t have to belong to any software application and then place two or more application windows inside it.  This composite window container would allow the user to monitor or utilize even four software applications within the same window.




FUTURE IMPLICATIONS:  In the case that the embedded windows feature is implemented, at the moment the user is still going to use it to carry out the conventional, manual operations of copy and paste and drag and drop.  That is to say, these are the only contemporary ways provided to share information between applications and windows.  But there is a possibility in the future of allowing, say, an AI agent window that was executed on the host machine to be embedded inside a web browser window and then hook up the contents of the web browser window’s viewport (the currently loaded page) through a connector line.  The embedded agent window will receive events (e.g. pageDidLoad) so that it can read the contents.  This would allow a more flexible use of AI agents and assistants on the host computer to interact with software applications.  Even when an application was not designed to make use of AI the AI can be used with it.  In short, the AI agent window, after being embedded in and hooked up to a word processing document, could both read from the document and write to it.