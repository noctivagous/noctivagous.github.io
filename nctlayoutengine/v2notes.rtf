{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww20700\viewh14200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 NCT Layout Engine  \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 	Introduction
\f0\b0 \
\
	In this layout engine there is an emphasis on making layout boxes in a way that is more natural because it results\
	from construction processes\'97 like extrude and inset.  What is typically the case, such as with \
	HTML/CSS, is the width and height are directly defined for documentelements nested in one another\
	and following this there is a process for positioning them on the page.  The problem is that \
	the page elements might shift each other\'92s size and location when another\
	one is inserted the situation suddenly becomes complicated.  There is a\
	lot of tedious tweaking back and forth before the desired layout can be achieved because new \
	boxes shift things around and it isn\'92t that easy to position page elements where you want them to be.\
	All kinds of rules provided by HTML/CSS have to be accommodated. \
	By contrast, this layout engine does not put boxes and content on the page inside the conventions of HTML/CSS.\
\
	To begin with, every child of a layout box will immediately inherit the same dimensions of that\
	parent 0layout box and for the child to be different in size or location it has to use construction or positioning instructions.\
	Otherwise it will be the same.  This makes the situation more stable. In actuality, any given child layout \
	box exists in reference to the parent that contains it on the page.  But the way that HTML/CSS sets it up, the 	children define themselves as if the parent didn\'92t set up their boundaries.\
	\
	Stability is more possible when attributes like width and height and margins are not explictly defined \
	attributes (e.g. width=\'93400pt\'94, height=\'93800pt\'94).  They are an implied result of operations or instructions in relation\
	to the inherited dimensions of the parent.  By taking this approach, many complex layouts are easier to conceptualize \
	in advance.  This box might be as if taking a piece out of what the parent\'92s rectangle is, while the other was made by\
	moving a side outwards or inwards some percentage of the original.  There are steps of procedure and construction.\
\
	Secondly, an important emphasis of the layout engine is separation of page layout and content which\
	means that the wireframe of any layer (PageLayout) determines the bounds for every page element (PageContent).\
	Every document contains layers (Layer). And every Layer of the document has two arrays containing\
	objects: PageLayout and PageContent.\
\
	In HTML/CSS, the layout of the page is described through CSS commands for containers that may be\
	the content elements themselves (e.g. the position of a button).  In this layout engine the page layout \
	of the page is setup through markup.  There are XML tags that exist for page layout alone, the primary\
	one being <LayoutBox>.  The process of making a document is supposed to reflect, in the code, \
	traditional print in that what occurs first is the scaffolding or wireframing of the page layout and \
	then what happens second is the insertion of the content and these two are not fused together.\
\
\

\f1\b 	PageLayout vs Content\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 \
		Consider that HTML/CSS combines the concept of layout and content attributes for each page element.  \
		For example, in each HTML document a button control is certainly a content element, having contenst, \
		and at the same time its dimensions and location are set up as attributes.\
\
		But in this layout system, there is no page element, like a button or text box, that owns its own width or height. \
		Instead it is associated with a layout box that does.  A button or text box fills the width and height of \
		the layout box that encloses it because the roles of layout and content have been separated into two.  \
		A page element does not have dimensions but relies on its layout box.  This appears to make more \
		work but actually assists in ease of conceptualization of the page construction code.  \
		Importantly, it allows for focus on traditional page layout as a prime activity because what people\
		work on first is the wireframe of everything.\
\
		- 
\f1\b PageLayout
\f0\b0  - The wireframe boxes.\
		- Content - What goes in the wireframe boxes.  \
			- Content controls like text fields and buttons do not control anything of layout.\
			They fill the region of the layout box in which they sit.\
	\
		Layout can be made the prime activity.  At any time, the content can be \'93turned off\'94 (the text boxes,\
		images, and buttons made invisible) and then what is visible is the wireframe (layout boxes) beneath them \
		with labels for each box.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 	The Layout Process
\f0\b0 \
\
	After the document dimensions (width, height) are provided, this gives the size for\
	each layer.  Each <Layer> contains one or more <LayoutBox>es that carry instructions.\
	The base class for layout is <LayoutBox> and there are descendants of this..\
\
	Any child LayoutBox begins by inheriting a size rectangle, and it modifies that instead of\
	defining directly width and height, etc  This is called its initialRectangle, the same as	the dimensions of the parent, and all settings or operations \
	are applied to this. There are a few sizing operations and any that are utilized are applied to to the \
	initialRectangle sequentially and cumulatively, with the later ones changing the results\
	of any earlier one.\
\
	In this layout system, every box is provided the initialRectangle that starts out the same as the parent's size attributes. \
	Sizing can occur because of operations that modify this initialRectangle and use it as\
	the reference for building up or taking out portions to get the final result.\
\
		- 
\f1\b Positioning
\f0\b0  - if desired, positioning instructions move the initialRectangle to any place around the perimeter of the \
		initialRectangle or keep it where it is.\
		- 
\f1\b Sizing
\f0\b0  instructions shape the initialRectangle relative to how it started out by moving edges in or out.\
  \
\
	Summarized, the parent's rectangle is what provides the child its initialRectangle and the subsequent\
	instructions or operations move it or change it into the desired result. \
\
\
POSITIONING OF THE INITIALRECTANGLE \
\
		Take a square and examine setting up its position relative to where it is,\
		as if it is the key 5 on the numeric keypad.  Assuming its initial position\
		is defined as the key 5, there are 9	 places for it on the keypad:\
\
			\{\
			"parentCenter" : 5,  / / no change. the default for initialRectangle.\
\
			"topLeftCorner\'94 : 7,\
			"topSide\'94 :8,\
			"topRightCorner\'94 : 9,\
\
			\'93rightSide\'94 : 6,\
\
			"bottomRightCorner" :3,\
			"bottomSide\'94 :2,\
			"bottomLeftCorner" :1,\
			"leftSide\'94 :4\
			\}\
\
		Its position is described in relation to the initialRectangle's sides and bounds\
		This uses the well-known numeric pad keys positions, \
		with the default position, being the same as the parent, being the value 5.\
		If the position is left at 5, the sizing instructions will be relative to how \
		the parent exists.\
\
		Since there are 8 edges the around the parent rectangle, there are 9 settings:\
\
\
\
		\
SIZING INSTRUCTIONS\
\
	The sizing instructions are altogether different from HTML in the following way. \
	They are a set of available instructions that use the initialRectangle as its reference\
	and each sizing later instruction affects any aspect of initialRectangle that was set up by \
	previous (if there is more than one utilized).  The user can specify just one \
	sizing operation or use multiple.\
\
\
	1) 
\f1\b extrudeFrom
\f0\b0  (start a rectangle anew) using one of the 6 sides of the initialRectangle, or expand outwards from one of the 2 intersecting axes of the initialRectangle.  extruding inwards from one of the 6 sides or extruding outwards in two directions from an axis line.\
\
			- extrude 10pt from the left edge to get a vertical rectangle that is 10pt wide, the height of the initialRectangle, and that always sits on 			the left edge of the initialRectangle.\
\
			also allowed in the future is using a custom horizontal or vertical line (vert:[1/3] for expanding outwards.\
\
\
	2) 
\f1\b inset
\f0\b0  \'97 pull inwards from the side(s) of the initialRectangle.   If desired, this can be the instruction that refines what extrude performed.\
			- pull inwards from the right edge by 50% to get the left half of the initialRectangle.\
			- pull inwards from the right edge by 10pt to get a rectangle with 10pt removed from the right side of the initialRectangle.\
			- pull inwards from all edges by 10pt to get a uniformly inset rectangle.\
\
\
	3) 
\f1\b adhereToEdges
\f0\b0  - adhering to sides of the initialRectangle - sets a rule that an edge or multiple edges\
	will be adhered to.\
\
\
	4) 
\f1\b adhereToPoints
\f0\b0  - set the corners of initialRectangle to two or more box points inside it. \
	if a box is divided into thirds horizontally and vertically, there are 18 points.\
	adhering to two box points can be described\
		\
			- for a box that is the lower left and one third the height and width:\
			adhere to points 1,1 and 5-1) as \
		 \
\
\
\
		DIMENSIONS MULTIPLIERS\
\
			heightMultiplier="3" // makes the height 3 times that of the parent.\
								  //  by default, scaling occurs around the rectangle's center origin.\
								    	\
			scalingOrigin = "6"        // again this uses the numeric keypad positions but for the 9 most common\
								     // scaling point locations\
\
			scalingOriginNudge = "2-2pt" // moves the scaling origin 270degrees by 2pt\
\
\
\
\
\
		TRANSFORMATIONS\
\
\
		INTERACTIVE ROLES\
			Message sending and roles are set up in the markup.\
	\
			interactiveRole=\'93swapDestination\'94 (for carousel)\
			interactiveRole=\'93swapTo\'94\
			\
			interactiveRole=\'93collapseExpand\'94  // for making accordion controls, the box will collapse or expand\
\
			registerBinding=\'93textBox1\'94 // for getting updates\
\
			registerRemoteBinding\
\
\
		COMBINATORIC OPERATIONS\
	\
\
			protrusion - extend a portion of a side of the initialRectangle\
			indentation - bring in a portion of a side of the initialRectangle\
\
			applyBezierPath (union,intersection,subtraction) - the shape of the initialRectangle is altered in this way.\
			shape - circle or polygon.\
\
\
XML ELEMENTS - The actual XML elements that carry these instructions and attributes are the following so far\
\
	
\f1\b Layer
\f0\b0  - Each layer contains a tree of LayoutBoxes\
\

\f1\b 	LayoutBox
\f0\b0  - the base class from which other inherit.  It carries the basic functionality of positioning, sizing instructions, etc.\
\
		<LayoutBox pullAwayFromEdges="fromBottomByPt:15;fromRightByPt:15;fromLeftByPt:15;fromTopByPt:15;"/>	\
\
		surrounded by a layer:\
\
		<Layer width="1920" height="1080">\
			<LayoutBox />\
		</Layer>\
\
\
\

\f1\b 	GridLayoutBox
\f0\b0  - children are laid out according to the attributes of GridLayoutBox.\
\
\
	If you had a PageLayoutBox you would provide it could lay children out\
	according to flow rules and direction.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 SHORTHAND\
\

\f1\b Dividing Ratio and Dividing Direction for <LayoutBox>\

\f0\b0 \
In the XML, usually one Content element is enclosed with a \
LayoutBox.  But <LayoutBox> has a default rule that if more than one content page element\
is placed inside its bounds, there is an implied layout box analyzed and sent to\
every content.  The default dividingRatio is equal divisions. The default direction is right.\
\
Cell is a content element.  This is a shorthand for a row\
of cells because there is a rule for the division.\
\
<LayoutBox dividingRatio=\'933:2:2\'94 dividingDirection=\'93right\'94>\
<Cell></Cell><Cell></Cell><Cell></Cell>\
<LayoutBox>\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
In this example, three columns are made with shorthand\
that divide three containers evenly\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 <LayoutBox dividingRatio=\'933:2:2\'94 dividingDirection=\'93right\'94 gutter=\'9310pt\'94>\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 <TextArea/> <TextArea/> <TextArea/>\
</LayoutBox>\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Default Next Child, Default Child Sizing\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 defaultNextChildPosition is set to 5.  But if it is set\
to something else, such as to the right of the parent rectangle,\
every child of the parent will sit, in order, to the right of the\
parent\
\
defaultChildSizing is the same as parent\'92s rectangle\
but if it is set to something else then every child rectangle will\
have that size from those set of operations (they will\
be the same in size).\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 TEXT FOR CONTENT \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Text will not show up if it is not enclosed in a <TextRegion> class or subclass,\
which is a Content type (vs. Layout).  So there are no free-floating paragraph\
tags or header tags as in HTML.  Text has to be enclosed by a <TextRegion>.\
Shorthand for this may be curly braces.\
\
A <TextRegion> can consist of RTF, allowing the document to go beyond HTML.\
\
\
BEHAVIOR DESCRIPTIONS\
\
For content controls, like text areas and \
Instead of placing all behavior descriptions in the markup,\
\
<Layout\
\
\
CODE\
\
Unlike convetional programming systems, variables \
are objects that able to contain their binding targets (e.g. GUI controls), binding \
events (e.g. valueDidChange) with callbacks.\
\
\
\
\
\
----\
\
The type of relative positioning that HTML/CSS discusses is not the same relative positioning as this layout system.\
In this system, boxes are not positioned by using a direct displacement of the origin or a side, unlike HTML.\
In HTML/CSS boxes are pushed around using margins and padding or they are told to expand to certain values\
of their containers.  This leaves a mess	of follow up operations and is difficult to use.\
\
---\
\
		The numeric pad keys are repurposed\
			for\
				direction movement, edge of a rectangle, and point location on a rectangle.\
}