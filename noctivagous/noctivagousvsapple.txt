WHY NOCTIVAGOUS IS BETTER THAN APPLE

noctivagous.github.io


Just like all other computer companies, Apple's
entire collection of software assets could be described from one 
perspective as an empire built on plain text code.  This is
not a concern brought up anywhere in software engineering discussions,
but in the future the computer research entity Noctivagous-- which mainly 
consists of a set of essays and alternative UI demos at the moment-- 
considers it a fork in the road for technology: if the software engineer believes
this aging file format .TXT will suffice indefinitely or 
perpetually for making professional computer software (regardless of how
fast and capable computers become) and he remains stubbornly 
nostalgic for the past and old UNIX ways of doing things, believing
that that short period of time in the 1970s should define all future
ways of providing a computer instructions and schematic, he will stay with
the mindset of computer companies like Apple and remain inside this fenced off
terrain for instructing a computer, called .TXT.   He will miss out on
the future until it finally arrives someday, when it has become unavoidable
and the norm.

If he can truly appreciate what Noctivagous has to say though, and view it 
objectively, he will recognize the implications of modernizing code's appearance, 
that a technological leap will  occur in software development when code's file 
format is upgraded from .TXT to a document file format.  Of course, such an
upgrade path will be anchored from the beginning within 
existing practices as people know them today instead of going down
the wrong path and incorporating unfamiliar and untested abstractions.  
Upgrading programming's appearance and style will involve staying close 
to software development technologies as they exist today before taking 
steps to depart from them and adding features.  
Only Noctivagous advocates this goal, 
to transform the appearance and behavior of code into something fitting our times, 
through a file format upgrade.  But why is that too much for anyone
when so few companies are doing anything major with programming languages; 
Java was first released back in 1995 and this is the last time a completely new 
programming system appeared. For too many software engineers, the accepted 
frame of discussion for new programming system features is microscopic and goes
no further than comparing the plain text syntax and features of one 
programming language with that of another.  When computers are so much 
more capable than 1995, a more macroscopic view is the starting point.

A programming concept cannot take on any graphical appearance if 
programming languages remain confined to the .TXT file format.
But of course there are many ways to instruct a computer that
involve diagrams and arrangements of symbols.  In the beginning,
these could appear right next to conventional code. 

The public looks to Apple for technological advances but Apple
generally doesn't attempt to break new ground in software 
engineering practices. It just makes incremental improvements on top of 
its underlying assets that are decades old, with Xcode being over 20 years old.
The highest quality apps on Apple's own platform were released more than 
a decade and a half ago and this means also that the foundational 
code inside them is likely that old. 
Most of the the high quality software products on Mac OS
have come from Apple itself and this is partly because writing application
software takes too much in terms of the number of people required.
To explain the limited goals Apple actually
has next to Noctivagous' objectives for programming, how the typical computer
company like this requires too much labor and too much personnel to
make quality software out of plain-text-based code,
we can use the analogy of how people made clothing
before the appearance of the sewing machine.  Writing code today
is as if making clothing without the benefit of having a sewing
machine because everything is so manual, primitive, and raw because
it is made out of .TXT.  The sewing machine was an important development during 
the industrial revolution that contributed to the foundation of modernity.
Previously, seamstress would sew clothing by hand
hand and the quantities produced therefore had to be small.
If you were to mass produce clothing in
times predating the sewing machine, if there were
such a thing, it would involve a warehouse of seamstresses.
This is basically the situation that any professional software team is engaged
in, where the number of personnel has to be great to overcome the undeveloped
and clumsy state of code, where very sophisticated software 
is described in large amounts of plain text code that has nothing built into
it to address the needs of modern computing times compared to the 1980s.
For example, the math matrix is typed out laboriously and tediously
across multiple sequential typewriter lines instead of appearing in between
two brackets.  Any external resource used by the program such as an image
or 3D model only shows up inside the code file by name and does not actually 
show up as a preview inside the file.  For this reason and many others,
the process of reading a file of code is one of laborious deciphering.

Everyone has experienced firsthand how brittle computer
technology can feel where, if you make a small error,
something breaks immediately.  To make quality computer
products today, it takes far more strenuous effort
than it should because this phenomenon exists from the
top to the bottom. You have to be extreme to make 
computer software products that work well because 
there is so much nickel-and-diming of you the whole
time, and you can burn out easily if you take on too much. 
This mainly what Apple spends its time trying to overcome, 
in a variety of areas, particularly when all software application
computer code still remains in .TXT.   To avoid the effects
of this nickel-and-diming, they have to hire a lot of people
who engage in unusually crafty endeavors to pull
off quality outcomes.

However, in the area of software, when computer code's file 
format is upgraded formally to document file format-- 
comprised of markup like XML-- and the contents are rendered 
inside the code editor from the XML just like a web page is 
rendered from its HTML, the capabilities possible inside a
document of code will become much broader,
in many directions, from lines of code that span multiple rows 
to diagrams that describe complex
processes.  The conversion to markup will even provide the 
opportunity to make code in XR (it will finally make sense
and provide the necessary data structure).  
Code will describe much more in a smaller amount of space
when it can express computer instructions graphically in
complex layouts, it will be easier to manage, and it 
will have deeper capabilities.

When this finally exists, Apple will have a hard time
maintaining an advantage over other computer companies
in software development, other companies will not have
their current advantages including Microsoft and Google,
and the playing field will become normal, not so lopsided,
with Apple doing the very best and everyone else doing
a mostly imitative job by comparison, because working 
in software won't require making extreme efforts to pull
off a quality outcome and, because the code is no longer
in plain text there will be new types of programmers who
can join the community.  Plain text is so old and outdated
that it doesn't scale to the present state of computing power
or the wide array of computer capabilities currently 
available that did not exist in the 1980s.   But too many 
software engineers are reluctant to acknowledge this.
.TXT wasn't made for all of this, and no one would have asked
anyone to use it for this time period.  Noctivagous often 
uses the analogy of building a house out of toothpicks: 
the unit for construction is too small, but of course with 
enough people, automation, and craftiness a house can be 
built with layers of toothpicks. Then, just like software 
engineering with plain text code, it all seems normal because 
automation has been provided somewhere, but the whole of the 
picture of software engineering is a pathetic one.

For some people, and understandably, only Apple products 
will suffice for work, to get things done,
but this is like only wanting to drive a luxury car
compared to the rest of the cars out there.  It shows that
the situation is imbalanced.  The underlying technologies
need to be upgraded in the way just described and then
it won't matter so much which computer the person chooses.

Often what Apple is about is making extreme efforts
to shape unwieldy computer technology.  Computer electronics
normally doesn't lend itself to quality outcomes
and so an exceptional person had to be involved at that
company.  The biography of Steve Jobs describes a lot 
of this, with Jobs battling the low quality tendencies 
of computer technology and the engineers pulling off
feats.

This no longer has to be the case in the area of software
engineering.  It won't take so many people pulling off stunts, 
working so bizarrely hard to make good software just because
the tools are so rotten and the file format outdated but familiar. 
Hard work will happen, but it won't be paired with 
full-time acrobatics to make a decent outcome.

When computer code is shifted to a document file format
the current competition dynamics will disappear, they will not just
transfer into new and more advanced conditions, because the
gap between how code exists in a basic text file (.TXT) today
and how it will exist in the future will be extremely
big.

The key point is that Noctivagous says that it isn't required
to gain the consensus of the software engineering community
to endeavor to upgrade software's file format.  
Rather, for various reasons, most software engineers are
expected to oppose what Noctivagous is doing.  This is why 
it is important to consult the field of graphic design and 
interactive media design first while grounding the activity 
to conventional software engineering that is on the machine today.

Software engineers just aren't aware that what they're used to 
is failing everyone. They think computer code is equivalent to 
what fits inside .TXT and anything else will cause them problems. 
The transformation of computer code by upgrading the file format 
from plain text (.TXT) (the same text characters that sat on 
old green monochrome terminal screens!) to a document file 
format will be the future of computer code. 

his entry into software engineering revealed a necessary upgrade that only an outsider can promote


Upgrade all applications that run on the Internet by upgrading computer code. The web is an application of the Internet.
Rewrite web browsers in a short period of time with powerful programming languages that are no longer tethered to .TXT but instead have deep capabilities enabled by XML under the code's much richer presentation and interactivity.
Future computer code will look more like what is in Hollywood movies, as it will not be stuck in the monochrome ASCII terminals.  Instead it will be rendered from XML.
Code will natively support interactivity, multimedia, and diagrams.
  
For the first time, graphic designers will have a role in the 
design of programming languages' appearance, how the code looks 
as it flows down the page.  Finally, math notation will be usable 
for commanding a computer when making conventional software products.  
A math  matrix will appear in code as a math matrix, not multiple lines 
of typewriter text characters-- a mess.

When code files are made out of XML (markup or structured data) instead of 
.TXT, the Xcode projects will be viewable in the Apple Vision Pro or
other XR device.

The dramatic increase in parseability of code that results from 
upgrading code's file format (to XML) will allow separating its constituents
(loops, control flow) so easily that the situation will lend itself 
to an interactive presentation of code inside XR, inspectable like machines.

That is to say, it will actually be meaningful to inspect and make
code in XR when the code files have had their file format upgraded
away from .TXT, something too primitive to work with in 3D.  
Major aspects of a running application will be viewable 
in XR. Its code will be viewable at the same time in space.



