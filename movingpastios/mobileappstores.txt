
Examining Mobile App Stores on Tablet Computers and Touchscreen Smartphones

The Greed of Apple and Google That Is Concealed from The Public by The Technical Conditions; A Deeper Understanding of Apple's iOS and Google's Android, Provided by a Software Developer



NOCTIVAGOUS.GITHUB.IO

The first tablet computers that appeared in the 2000s presented the consumer with an unmodified desktop computer screen. Interacting with the software was often tied to the use of a stylus.  Apart from omitting multi-touch functionality on the screen, the computer companies did not recognize that the input and interface to the operating system had changed, moving from mouse buttons and a screen cursor to intermittent touches.  That is, no conversion of the overall system user interface or the apps on these devices was undertaken.  As would have to be the case, these products carried little appeal except for niche users. They ended up providing, for a mobile situation, a more complicated way to use a mouse cursor and PC operating system.

For the same reason that a car’s frame and chassis cannot be directly utilized for the fuselage of an airplane or the hull of a boat, the desktop PC operating system, its cursor, and the software it runs, cannot be left the same for a touchscreen tablet or smartphone device.  When the overall input configuration and form of the hardware changes, everything else should react too.  In some cases this is apparent to everyone as part of the technology shift, such as how VR games have to be developed differently than traditional 3D video games, and so everyone makes the change.  In other subjects, it is less obvious and continues to exist in an inadequate state, such as how video game controllers still do not detect how much force has been applied to their buttons and never have. (Each button is like an on-off light switch, including the arrow buttons.)  If that one aspect of a controller changes, all of the video game companies have to change too.

On a touchscreen, the finger is swooping in and touching the screen's graphical buttons, not the cursor being pushed around, so all apps have to be written or converted for that.  For example, the computer user can't easily use touch for desktop apps because the desktop apps’ buttons are too small for the fingers.  Furthermore, when it is a touchscreen device with no keyboard then all of the keyboard (hotkey) command shortcuts aren't possible.  Therefore, the desktop interface has to be restructured for apps that end up looking different; the apps as they are developed have to be rearranged for touches, following a consistent set of rules for bigger buttons.  Under Steve Jobs, Apple went about making that kind of modification for Mac OS, transforming its exterior into a separate touch operating system, iOS, for its own type of apps.  It isn't a deep system-level change, however.  iOS is mostly a set of external software conventions for touch-based apps, to make apps easy to touch and use.

This change of user interface has nothing to do with what software can be allowed for execution by the computer itself or the user.  It has no impact there, whatsoever.  In addition to that, not everyone would implement the surrounding touch operating system conventions in such a kiosk-like, minimalistic, and restrictive way like Apple or Google choose.  With all of the differences occurring between mobile tablets and desktop computers, an opportunity arose for Apple and Google to deceive the public, that this change in computing format necessitated a restrictive environment on how apps are loaded and executed on the hardware, that the two companies need to vet any app executed from within an online store, prohibit custom or independent app execution by the user, and take a large percentage of sales at the same time.  This part is completely artificial, a point made exceedingly obvious by Microsoft Surface tablets: these tablets run any Windows app the user wishes or downloads from anywhere, and they are touchscreen devices.  Microsoft just never cared much for app store profits and it never bothered to make a mobile flavor of Windows for Microsoft Surface devices that provided a framework for mobile-specific apps, so these tablets just run desktop apps and carry the problems just mentioned, that the software engineer has to be provided a separate set of conventions for touch software (like iOS and Android) or else it will be desktop software being used in an awkward way.   Microsoft could have done better and provided its Surface tablets an entirely separate OS variation for mobile, offering a kit for software developers to use, and then left access to regular Windows apps on the side for those who hook up a physical keyboard.  In the same way, iPads could be made to run Mac OS apps on the side, as the iPad Pro currently has the same processor (M2) as the latest desktop and notebook Macs.  This is why mobile devices could run any touchscreen app just freely as desktop machines run theirs.  The enormous effort to convince the public and the law otherwise is entirely motivated by the desire for profit.

What Apple and Google did was make the kiosk-like grid launch screen and the app store the center of the user experience with these devices and then confine the user to them.  An app store is just an app.  At the center of this is that profits are too high to these companies to do the right thing and open the mobile operating systems back up to normalcy, which means they can be used freely by pro users and software developers to execute anything.  It has reached the point that everyone who uses a phone is an unwitting participant of this high fee that Apple and Google imposes on the touchscreen device software developer.  In recent years, Apple has been trying to push this profit scheme onto the desktop software developers too, actively discouraging users from opening any Mac OS app that was not downloaded and vetted by the Mac OS App Store, with popup warning boxes.  All of this is an attempt to satisfy more greed and amass more control over the computer users and extract more money from the software developers selling the software.

