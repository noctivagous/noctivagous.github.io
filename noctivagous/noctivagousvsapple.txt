WHY NOCTIVAGOUS IS BETTER THAN APPLE

noctivagous.github.io

To explain the limited advantage Apple actually
has next to Noctivagous' objectives for code,
we can use the analogy of how people made clothing
before the appearance of the sewing machine.
The sewing machine was an important
development during the industrial revolution
that contributed to the foundation of modernity.
Previously, you would sew clothing by hand
hand and quantities produced therefore had to be small.
If you were to mass produce clothing in
times predating the sewing machine, if there were
such a thing, it would involve a warehouse of seamstresses.

Everyone has experienced firsthand how brittle computer
technology can feel, where if you make a small error
something breaks immediately.  To make quality computer
products today, it takes a lot more strenuous effort
than it should because this phenomenon exists from the
top to the bottom. You have to be extreme to make it work well
because there is so much nickel-and-diming of you the whole
time and you can burn out easily. This mainly what Apple spends
its time trying to overcome, in a variety of areas,
in particular when all software application
computer code still remains in .TXT.   To tolerate
this nickel-and-diming, they have to hire a lot of people
who have to engage in unusually crafty behavior to pull
off quality outcomes.

However, when computer code's file format is upgraded to a formal
document format-- made out of markup
like XML-- and the contents are rendered inside the
code editor from the XML just like a web page is rendered
from the HTML, the capabilities possible inside a
document of code will become many times broader,
in many directions, from lines of code that are
interactive to diagrams that describe complex
processes, and more.  Code will describe much
more in a smaller amount of space, it will be
easier to manage, and it will have deeper capabilities.

When this finally exists, Apple will have a hard
maintaining an advantage over other computer companies
in software development, other companies will not have
their current advantages including Microsoft and Google,
and the playing field will become normal, not so lopsided,
with Apple doing the very best and everyone else doing
a mostly mediocre job by comparison (or being an Apple copycat),
because working in software won't require making extreme efforts to pull
off a quality outcome.  Plain text is so old and outdated
that it doesn't "scale" to the present, but too many
software engineers are reluctant to acknowledge this.

For some people, and understandably,
only Apple products will suffice for work, to get things done,
but this is like only wanting to drive a luxury car
compared to the rest of the cars out there.  It shows that
the situation is imbalanced.  The underlying technologies
need to be upgraded in the way just described.

Often what Apple is about is making extreme efforts
to shape unwieldy computer technology which normally
doesn't lend itself to quality outcomes.  The biography
of Steve Jobs involves a lot of this, with Jobs battling
the low quality tendencies of computer technology.

This no longer has to be the case in the area of software
engineering.  It won't take so many people doing such
crafty things, working so bizarrely hard, to make good software.
Hard work will happen but it won't be full-time acrobatics.

When computer code is shifted to a document file format,
current competition dynamics will disappear, they will not just
transfer into new and more advanced conditions, because the
gap between how code exists in a basic text file (.TXT) today
and how it will exist in the future will be extremely
big.