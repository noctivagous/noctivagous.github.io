Minimal Indie Developer IDE / Stage 1 AI Code Editor

# PROJECT REQUIREMENTS DOCUMENT

# Minimal Indie Developer IDE

This project is a lightweight, web-based Integrated Development Environment (IDE) 
designed for the first stage of software development for an individual or indie 
software developer when previewing functionality is the goal, not the full code base. 
It revolves around a minimal setup for this stage by editing within only four code files 
(`index.html`, `script.js`, `style.css`, `app.py`) and one project description file.  
It features a live preview pane, the CodeMirror project for syntax highlighting, 
a console area, and an AI chat box that for assistance. For the software project, 
although it is limited to four files, it does allow them to reference external 
JavaScript and Python libraries. It is intended for the early stage of a project that 
can later be scaled into full-fledged IDEs.  A software developer can make a very long 
files within these four files just before transitioning them to AI code editors that 
organize them.

Two parameters to provide to the user are modularity and optimization/performance.  
When writing code sketches quickly, the software developer isn't focused on modularity and
optimization and is just trying to get demos working to see how the concept works
in practice, whether it is a viable path, how much work it will take to do the program
to completion.

# Background

There are times when the independent software developer is just trying to make
demos and prototypes and then piece them together into a larger demo before building 
the actual program.  The agent-based AI code editors aren't able to accomodate this
because they don't ever generate stripped down or basic demos, as it isn't a recognized
practice in software development. They instead do what you should when planning big
projects, build out lots of scaffolding and plan for the full level of modularity 
and optimization from the start.
 
They don't recognize the process of an independent software developer who builds up 
a program from a small code base and observes results along the way, revising the code in 
response to what is executed.  It isn't always the time to modularize or optimize when you
are making demos, as that is a step for later. These agent-based code editors 
generate broad plan details and code to manage from the outset.  They attempt to 
produce the entire code base all at once without ever executing the program and 
observing it. 

In response to this, software developers are returning to the AI chatbots like ChatGPT
to generate code, where they can get an interactive process with the AI, giving them
much better control over the AI's generation of code. They get more reliable results 
because they can interact with the AI on each point of the section of the code being
worked on, unlike these agent-based AI code editors that behave like runaway servants
who come back with finished results.  The manual method of making code via AI chatbots
allows the software development to sync with how code was written before AI, and there
will be no surprises in what the program is when it is made progressively in a cycle
where the software developer examines the results after executing the program.
  
Writing software with an AI agent that goes off and does things on its own,
keeps you out of the loop, and then reports what it just did is unworkable for so many
situations.   It shows that if the agent-based AI code editors keep the software 
developers out of the loop, they are going to be relegated to the category of novelties
for many situation.  They aren't respecting what the software developer has always done.

Even if the goal of the software developer is to eventually produce large amounts of code for a 
complete software project, this mass production of code by the AI agent without the software
developer's participation is a problem.  The most notable deficiency of these
agent-based AI code editors is that they don't prompt the software developer with 
any questions or comments before fulfilling a request, they don't ask for any 
clarifications when any task has multiple ways to approach it or is vague aspects, 
and they never explain what they are about to do for the user's review and approval before 
they do it.  This is a topic Noctivagous discusses elsewhere, which is the benefit 
of designing an AI chatbot to insert detail collection menus or intermediate menus into 
interactions before generating anything.  These will ask the user questions, mention the 
implications of a set of tasks, provide suggestions, or explain what is going to happen.

AI can produce code quickly, but an AI agent can't just be embedded inside a code editor and
produce a successful software development product-- never examining deeper aspects 
of how software development occurs and just focusing on what the AI agent does with the code.  
When software developers write programs or software on their own they write them while 
observing results at each step and by the time there is a milestone the program has been run.  
Large bodies of code are inserted by these AI agents with the software developer
out of the loop and the program never having been executed.

Even on a team project where the code base is large and divided, if a person is working 
on an isolated component he will be working on it while observing results as the
code is edited.  By contrast, when the AI code editor agents undertake a project, 
they first outline maximally complete roadmaps of what will have to be accomplished 
and then start inserting code into files.  The seeming advantage of it taking
over all of these tasks that would normally only be possible when there are
a dozen or more people working in a team environment is ignoring the fact
that when that happens in an office environment, the project is put together in
a step-by-step process spread out over time, with the team being informed over 
the weeks and months about what is happening, including on a whiteboard or bulletin board.
For the AI code editor to attempt to do this all at once in a day of code insertion
skips over the actual aspects that make any of the software development team environments
work.

An alternative to the current AI code editor IDEs would be one that is purposely 
limited to four files: an HTML file, a JavaScript file, a CSS file, and one 
Python backend file, though
the HTML can reference external JS libraries and the Python can import external
libraries.  This is to work on the project at the beginning stage and then
later, if desired, put it into an AI code editor IDE.  It would have the four
files at the top in tabs plus an additional preview pane and work within that
the entire time.  The software developer would not mind if the files become long
and when they become very long he can break them off into individual files with
the other AI code editor IDEs.


# PROJECT REQUIREMENTS DOCUMENT

# Minimal Indie Developer IDE

This project is a lightweight, web-based Integrated Development Environment (IDE) 
designed for the first stage of software development for an individual or indie 
software developer when previewing functionality is the goal, not the full code base. 
It revolves around a minimal setup for this stage by editing within only four code files 
(`index.html`, `script.js`, `style.css`, `app.py`) and one project description file.  
It features a live preview pane, the CodeMirror project for syntax highlighting, 
a console area, and an AI chat box that for assistance. For the software project, 
although it is limited to four files, it does allow them to reference external 
JavaScript and Python libraries. It is intended for the early stage of a project that can later be scaled into 
full-fledged IDEs.  A software developer can make a very long files within these
four files just before transitioning them to AI code editors that organize them.


## Project Overview

The IDE provides a simple environment for editing and previewing code, with a focus 
on the stage when the codebase is small and manageable. It includes:

- **Four File Tabs**: For editing `index.html`, `script.js`, `style.css`, and `app.py`.
- **Split-Pane Interface**: Code editors on the left, live preview on the right.
- **CodeMirror Integration**: Enhances editing with syntax highlighting and line numbers.
- **AI Chat Prompt**: A bottom panel for interacting with an AI assistant (mock implementation).
- **Live Preview**: Updates in real-time for HTML, JavaScript, and CSS changes.

## File Structure

The project is encapsulated in a single `index.html` file, which simulates the four files through text areas or CodeMirror editors.

| File Name       | Purpose                                                                 |
|-----------------|-------------------------------------------------------------------------|
| `index.html`    | Defines the HTML structure, references `style.css` and `script.js`.      |
| `script.js`     | Contains JavaScript logic, e.g., a `sayHello` function with jQuery.      |
| `style.css`     | Styles the HTML content with CSS rules.                                 |
| `app.py`        | Simulated Python backend (e.g., Flask), not executed in the browser.     |

## Layout Description

### 1. Tabs
- Located at the top of the interface.
- Four clickable tabs (`index.html`, `script.js`, `style.css`, `app.py`) for switching between editors.
- Active tab is highlighted with a blue underline and white background.

### 2. Split-Pane Interface
- **Left Pane**: Code editor for the active file, powered by CodeMirror.
  - Displays one file at a time based on the selected tab.
  - Supports syntax highlighting for HTML, JavaScript, CSS, and Python.
  - Includes line numbers for better code navigation.
- **Right Pane**: Live preview iframe showing the rendered HTML.
  - Updates automatically when HTML, JavaScript, or CSS changes.
  - Does not render Python code, as it simulates a backend.

### 3. AI Chat Prompt
- Located at the bottom, below the split panes.
- Consists of:
  - **Message Area**: Scrollable div for displaying user and AI messages.
  - **Input Field**: Text input for sending queries to the AI (mock responses for now).
- Messages are appended on Enter keypress, with simulated AI replies after a short delay.

## Functionality

- **Tab Switching**: Clicking a tab shows its corresponding editor and refreshes the CodeMirror instance.
- **Code Editing**: CodeMirror provides syntax highlighting and line numbers for all file types.
- **Live Preview**: HTML, JavaScript, and CSS changes are reflected instantly in the preview iframe.
- **External Libraries**:
  - HTML references jQuery (`https://code.jquery.com/jquery-3.6.0.min.js`).
  - Python can import libraries like Flask (simulated, requires a server for execution).
- **AI Chat**: Users type queries, and the system appends mock AI responses.

## Technical Details

- **HTML Structure**:
  - Uses `<div class="tabs">` for tab navigation.
  - `<div class="editor-container">` splits into editor and preview panes.
  - `<div class="chat-container">` holds the chat interface.
- **CSS Styling**:
  - Flexbox layout for responsive design.
  - Tabs styled with hover and active states.
  - CodeMirror editors fill the editor pane with a monospace font.
- **JavaScript**:
  - Initializes CodeMirror for each file type (HTML, JavaScript, CSS, Python).
  - Handles tab switching, preview updates, and chat interactions.
  - Uses jQuery for external API call simulation.
- **CodeMirror**:
  - Imported via CDN (`codemirror.min.js`, `codemirror.min.css`).
  - Modes: `htmlmixed`, `javascript`, `css`, `python`.
- **Chat Implementation**:
  - Basic input field with `keypress` event listener.
  - Simulated AI responses with a 500ms delay.

## Usage

1. Save the project as `index.html`.
2. Open in a browser to access the IDE.
3. Edit code in the left pane, observe live preview on the right.
4. Use the chat input at the bottom to simulate AI queries.
5. When files grow large, export them to a full IDE (e.g., VS Code) for further development.

## Future Enhancements

- Integrate a Python runtime (e.g., Pyodide) for executing `app.py`.
- Connect the AI chat to a real API (e.g., xAI’s Grok API).
- Add file export functionality to save individual files.
- Enhance CodeMirror with themes or auto-completion.

## Notes

- The Python file (`app.py`) is for editing only; execution requires a separate server setup.
- The AI chat is a mock implementation; replace with a real AI service for production use.
- Ensure an internet connection for loading jQuery and CodeMirror CDNs.

---